; ----------------------------------------------------------------------------------------------------------------
;
; SetTolls.job
;
; TP+ script to set the bridge and value tolls in the highway network.  A value toll is paid to save time by 
; taking a parallel (e.g. HOT) or nearby facility.  The time periods are: early AM, 3 am to 6 am; AM peak, 6 am to
; 10 am; midday, 10 am to 3 pm; PM peak, 3 pm to 7 pm; and evening, 7 pm to 3 am the next day.
;
; A separate SetTolls.job is needed for each forecast year and for each pricing alternative. 
;
; The variable TOLLBOOTH specifies one of the eight existing Bay Area bridge toll booths as follows:
; (1) Benicia-Martinez Bridge; (2) Carquinez Bridge; (3) Richmond Bridge; (4) Golden Gate Bridge; (5) San Francisco/
; Oakland Bay Bridge; (6) San Mateo Bridge; (7) Dumbarton Bridge; (8) Antioch Bridge.  TOLLBOOTH codes nine and ten
; are reserved for testing new Bridges. 
;
; TOLLBOOTH codes 11 and above (please see hwyParam.block which denotes this value) are reserved for so-called "value
; toll" facilities, which are currently used to model high-occupancy toll (HOT) lanes.  These variables can be used
; to toll specific links (each link with a different toll needs a different TOLLBOOTH code). 
;
; All tolls should be expressed in year 2000 cents.
;
; Separate tolls can be charged to each of seven vehicle classes, as follows: (1) single-occupancy passenger 
; vehicles, or drive alone, "DA"; (2) two-occupant passenger vehicles, or shared ride two, "S2"; (3) three-or-more-
; occupant passenger vehicles, or shared ride three, "S3"; (4) very small commercial trucks, which are assumed to 
; be two-axle vehicles, "VSM"; (5) small commercial trucks, which are assumed to be two-axle vehicles, "SML"; (6)
; medium commercial trucks, which are assumed to be three-axle vehicles, "MED"; and, (7) combination trucks, which
; are charged the average of the five- and six-axle fee, "LRG". 
;
;
; Input:  A highway network containing the field TOLLBOOTH, which holds an integer representing the toll booth at 
;         each bridge.  
;
; Output: A highway network containing the following fields:TOLLXX_YY, where XX is a two-letter code
;         representing one of the five time periods and YY is the path in question, be it drive alone, shared
;         ride 2 or 3+, or very small, small, medium, or large (combination) trucks. 
;
;; See also: (1) hwyParam.block, which stores the "firstValue" variable denoting 11 as the first value toll. 
;
; version:  Travel Model Zed
; authors:  dto (2010 08 10); gde (2009 03 12); crf (2013 07)
;
;
; ----------------------------------------------------------------------------------------------------------------

RUN PGM=HWYNET
    PAR NODES=10000000

    ; begin with the standard input network
   neti = hwy\mtc_final_network_base.net
   
   ; write out to the same name with the added variables   
   neto = hwy\mtc_final_network_base_with_tolls.net
   
   ; the input tolls file
   FILEI LOOKUPI[1]=hwy\tolls.csv
   
   
   ; load toll values
   lookup lookupi=1, name=tolls, 
     lookup[1]=1, result=2,      ; (fac_index,tollbooth)
     lookup[2]=1, result=3,      ; (fac_index,tollseg)
     lookup[3]=1, result=5,      ; (fac_index,useclass)
     lookup[4]=1, result=6,      ; (fac_index,tollea_da)
     lookup[5]=1, result=7,      ; (fac_index,tollam_da)
     lookup[6]=1, result=8,      ; (fac_index,tollmd_da)
     lookup[7]=1, result=9,      ; (fac_index,tollpm_da)
     lookup[8]=1, result=10,     ; (fac_index,tollev_da)
     lookup[9]=1, result=11,     ; (fac_index,tollea_s2)
     lookup[10]=1, result=12,    ; (fac_index,tollam_s2)
     lookup[11]=1, result=13,    ; (fac_index,tollmd_s2)
     lookup[12]=1, result=14,    ; (fac_index,tollpm_s2)
     lookup[13]=1, result=15,    ; (fac_index,tollev_s2)
     lookup[14]=1, result=16,    ; (fac_index,tollea_s3)
     lookup[15]=1, result=17,    ; (fac_index,tollam_s3)
     lookup[16]=1, result=18,    ; (fac_index,tollmd_s3)
     lookup[17]=1, result=19,    ; (fac_index,tollpm_s3)
     lookup[18]=1, result=20,    ; (fac_index,tollev_s3)
     lookup[19]=1, result=21,    ; (fac_index,tollea_vsm)
     lookup[20]=1, result=22,    ; (fac_index,tollam_vsm)
     lookup[21]=1, result=23,    ; (fac_index,tollmd_vsm)
     lookup[22]=1, result=24,    ; (fac_index,tollpm_vsm)
     lookup[23]=1, result=25,    ; (fac_index,tollev_vsm)
     lookup[24]=1, result=26,    ; (fac_index,tollea_sml)
     lookup[25]=1, result=27,    ; (fac_index,tollam_sml)
     lookup[26]=1, result=28,    ; (fac_index,tollmd_sml)
     lookup[27]=1, result=29,    ; (fac_index,tollpm_sml)
     lookup[28]=1, result=30,    ; (fac_index,tollev_sml)
     lookup[29]=1, result=31,    ; (fac_index,tollea_med)
     lookup[30]=1, result=32,    ; (fac_index,tollam_med)
     lookup[31]=1, result=33,    ; (fac_index,tollmd_med)
     lookup[32]=1, result=34,    ; (fac_index,tollpm_med)
     lookup[33]=1, result=35,    ; (fac_index,tollev_med)
     lookup[34]=1, result=36,    ; (fac_index,tollea_lrg)
     lookup[35]=1, result=37,    ; (fac_index,tollam_lrg)
     lookup[36]=1, result=38,    ; (fac_index,tollmd_lrg)
     lookup[37]=1, result=39,    ; (fac_index,tollpm_lrg)
     lookup[38]=1, result=40,    ; (fac_index,tollev_lrg)
     fail[1]=0,
     fail[2]=0,
     fail[3]=0,                  ; set toll to zero if not found in table
     list=Y                      ; echo the lookup table to the standard printo file
     
   fac_index = tollbooth*1000+tollseg*10+useclass 
     
   ; apply the bridge tolls
   
   if (TOLLBOOTH > 0 && TOLLBOOTH < 11)

     TOLLEA_DA = TOLLS(4,fac_index)*100    
     TOLLAM_DA = TOLLS(5,fac_index)*100    
     TOLLMD_DA = TOLLS(6,fac_index)*100    
     TOLLPM_DA = TOLLS(7,fac_index)*100    
     TOLLEV_DA = TOLLS(8,fac_index)*100    

     TOLLEA_S2 = TOLLS(9,fac_index)*100    
     TOLLAM_S2 = TOLLS(10,fac_index)*100    
     TOLLMD_S2 = TOLLS(11,fac_index)*100    
     TOLLPM_S2 = TOLLS(12,fac_index)*100    
     TOLLEV_S2 = TOLLS(13,fac_index)*100    

     TOLLEA_S3 = TOLLS(14,fac_index)*100    
     TOLLAM_S3 = TOLLS(15,fac_index)*100    
     TOLLMD_S3 = TOLLS(16,fac_index)*100    
     TOLLPM_S3 = TOLLS(17,fac_index)*100    
     TOLLEV_S3 = TOLLS(18,fac_index)*100    

     TOLLEA_VSM = TOLLS(19,fac_index)*100    
     TOLLAM_VSM = TOLLS(20,fac_index)*100    
     TOLLMD_VSM = TOLLS(21,fac_index)*100    
     TOLLPM_VSM = TOLLS(22,fac_index)*100    
     TOLLEV_VSM = TOLLS(23,fac_index)*100    

     TOLLEA_SML = TOLLS(24,fac_index)*100    
     TOLLAM_SML = TOLLS(25,fac_index)*100    
     TOLLMD_SML = TOLLS(26,fac_index)*100    
     TOLLPM_SML = TOLLS(27,fac_index)*100    
     TOLLEV_SML = TOLLS(28,fac_index)*100    

     TOLLEA_MED = TOLLS(29,fac_index)*100    
     TOLLAM_MED = TOLLS(30,fac_index)*100    
     TOLLMD_MED = TOLLS(31,fac_index)*100    
     TOLLPM_MED = TOLLS(32,fac_index)*100    
     TOLLEV_MED = TOLLS(33,fac_index)*100    

     TOLLEA_LRG = TOLLS(34,fac_index)*100    
     TOLLAM_LRG = TOLLS(35,fac_index)*100    
     TOLLMD_LRG = TOLLS(36,fac_index)*100    
     TOLLPM_LRG = TOLLS(37,fac_index)*100    
     TOLLEV_LRG = TOLLS(38,fac_index)*100    
     
   ENDIF
   
   ; apply the express lane tolls
   
   IF (TOLLBOOTH > 10)
   
     TOLLEA_DA = ROUND(TOLLS(4,fac_index)*100*FEET/5280)    
     TOLLAM_DA = ROUND(TOLLS(5,fac_index)*100*FEET/5280)    
     TOLLMD_DA = ROUND(TOLLS(6,fac_index)*100*FEET/5280)    
     TOLLPM_DA = ROUND(TOLLS(7,fac_index)*100*FEET/5280)    
     TOLLEV_DA = ROUND(TOLLS(8,fac_index)*100*FEET/5280)    

     TOLLEA_S2 = ROUND(TOLLS(9,fac_index)*100*FEET/5280)    
     TOLLAM_S2 = ROUND(TOLLS(10,fac_index)*100*FEET/5280)    
     TOLLMD_S2 = ROUND(TOLLS(11,fac_index)*100*FEET/5280)    
     TOLLPM_S2 = ROUND(TOLLS(12,fac_index)*100*FEET/5280)    
     TOLLEV_S2 = ROUND(TOLLS(13,fac_index)*100*FEET/5280)    

     TOLLEA_S3 = ROUND(TOLLS(14,fac_index)*100*FEET/5280)    
     TOLLAM_S3 = ROUND(TOLLS(15,fac_index)*100*FEET/5280)    
     TOLLMD_S3 = ROUND(TOLLS(16,fac_index)*100*FEET/5280)    
     TOLLPM_S3 = ROUND(TOLLS(17,fac_index)*100*FEET/5280)    
     TOLLEV_S3 = ROUND(TOLLS(18,fac_index)*100*FEET/5280)    

     TOLLEA_VSM = ROUND(TOLLS(19,fac_index)*100*FEET/5280)    
     TOLLAM_VSM = ROUND(TOLLS(20,fac_index)*100*FEET/5280)    
     TOLLMD_VSM = ROUND(TOLLS(21,fac_index)*100*FEET/5280)    
     TOLLPM_VSM = ROUND(TOLLS(22,fac_index)*100*FEET/5280)    
     TOLLEV_VSM = ROUND(TOLLS(23,fac_index)*100*FEET/5280)    

     TOLLEA_SML = ROUND(TOLLS(24,fac_index)*100*FEET/5280)    
     TOLLAM_SML = ROUND(TOLLS(25,fac_index)*100*FEET/5280)    
     TOLLMD_SML = ROUND(TOLLS(26,fac_index)*100*FEET/5280)    
     TOLLPM_SML = ROUND(TOLLS(27,fac_index)*100*FEET/5280)    
     TOLLEV_SML = ROUND(TOLLS(28,fac_index)*100*FEET/5280)    

     TOLLEA_MED = ROUND(TOLLS(29,fac_index)*100*FEET/5280)    
     TOLLAM_MED = ROUND(TOLLS(30,fac_index)*100*FEET/5280)    
     TOLLMD_MED = ROUND(TOLLS(31,fac_index)*100*FEET/5280)    
     TOLLPM_MED = ROUND(TOLLS(32,fac_index)*100*FEET/5280)    
     TOLLEV_MED = ROUND(TOLLS(33,fac_index)*100*FEET/5280)    

     TOLLEA_LRG = ROUND(TOLLS(34,fac_index)*100*FEET/5280)    
     TOLLAM_LRG = ROUND(TOLLS(35,fac_index)*100*FEET/5280)    
     TOLLMD_LRG = ROUND(TOLLS(36,fac_index)*100*FEET/5280)    
     TOLLPM_LRG = ROUND(TOLLS(37,fac_index)*100*FEET/5280)    
     TOLLEV_LRG = ROUND(TOLLS(38,fac_index)*100*FEET/5280)    
     
   ENDIF
    
ENDRUN